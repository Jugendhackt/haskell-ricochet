{-|
  Module:      Network.Ricochet.Protocol.Protobuf.Chat
  Description: Lenses for ChatChannel.proto messages

"Network.Ricochet.Protocol.Protobuf.Chat" mostly re-exports lenses that are
generated by hprotoc.  One Maybe layer is removed from the record members of
'CP.Packet', and the name conflict between 'CM.message_id' and 'CA.message_id'
is resolved by introducing 'HasMessageId'.
-}

module Network.Ricochet.Protocol.Protobuf.Chat
  ( CP.Packet (CP.Packet)
  , chat_message
  , chat_acknowledge
  , message_id
  , CM.ChatMessage (CM.ChatMessage)
  , message_text
  , time_delta
  , CA.ChatAcknowledge (CA.ChatAcknowledge)
  , accepted
  ) where

import qualified Network.Ricochet.Protocol.Data.Chat.Packet as CP
import qualified Network.Ricochet.Protocol.Data.Chat.ChatMessage as CM
import qualified Network.Ricochet.Protocol.Data.Chat.ChatAcknowledge as CA

import           Network.Ricochet.Protocol.Protobuf (utf8')

import           Control.Lens                     (Traversal', Lens', _Just,
                                                   non)
import           Data.Text                        (Text)
import           Data.Word                        (Word32)
import           Data.Int                         (Int64)
import           Text.ProtocolBuffers

-- | Only the initiator of the channel should send a packet where this traversal
--   yields a result.  It contains a message composed by the user.
chat_message :: Lens' CP.Packet (Maybe CM.ChatMessage)
chat_message = CP.chat_message

-- | Only the non-initiator of the channel should send a packet where this
--   traversal yields a result.  It contains an acknowledgement that a message
--   has been received.
chat_acknowledge :: Lens' CP.Packet (Maybe CA.ChatAcknowledge)
chat_acknowledge = CP.chat_acknowledge

class HasMessageId m where
  -- | We use the typeclass 'HasMessageId' because both 'CM.ChatMessage' and
  --   'CA.ChatAcknowledge' have a @message_id@.
  --
  --   If a @message_id@ is zero or ommitted, this means no acknowledgement is
  --   expected.  If it is non-zero, the recipient should send a
  --   'CA.ChatAcknowledge' with the same @message_id@.  Unacknowledged messages
  --   may be re-sent with the same @message_id@, and the recipient should drop
  --   duplicate messages with an identical non-zero @message_id@, after sending
  --   an acknowledgement.
  message_id :: Lens' m (Maybe Word32)

instance HasMessageId CM.ChatMessage where
  message_id = CM.message_id

instance HasMessageId CA.ChatAcknowledge where
  message_id = CA.message_id

-- | The text in a message.  It should not exceed
--   'Network.Ricochet.Protocol.Protobuf.ContactRequest.messageMaxCharacters'.
message_text :: Traversal' CM.ChatMessage Text
message_text = CM.message_text . utf8'

-- | The time this message was stored until it was sent, negative.
time_delta :: Traversal' CM.ChatMessage Int64
time_delta = CM.time_delta . _Just

-- | Whether the acknowledged message has been accepted by the receiver.
accepted :: Lens' CA.ChatAcknowledge Bool
accepted = CA.accepted . non True
