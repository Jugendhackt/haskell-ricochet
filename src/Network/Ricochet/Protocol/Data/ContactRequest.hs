{-# LANGUAGE BangPatterns, DeriveDataTypeable, FlexibleInstances, MultiParamTypeClasses #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
module Protocol.Data.ContactRequest (contact_request, response, protoInfo, fileDescriptorProto) where
import Prelude ((+), (/), (==), (<=), (&&))
import qualified Prelude as Prelude'
import qualified Data.Typeable as Prelude'
import qualified Data.Data as Prelude'
import qualified Text.ProtocolBuffers.Header as P'
import Text.DescriptorProtos.FileDescriptorProto (FileDescriptorProto)
import Text.ProtocolBuffers.Reflections (ProtoInfo)
import qualified Text.ProtocolBuffers.WireMessage as P' (wireGet,getFromBS)
import qualified Protocol.Data.ContactRequest.ContactRequest as Protocol.Data.ContactRequest (ContactRequest)
import qualified Protocol.Data.ContactRequest.Response as Protocol.Data.ContactRequest (Response)
import qualified Protocol.Data.Control.ChannelResult as Protocol.Data.Control (ChannelResult)
import qualified Protocol.Data.Control.OpenChannel as Protocol.Data.Control (OpenChannel)
 
contact_request :: P'.Key P'.Maybe Protocol.Data.Control.OpenChannel Protocol.Data.ContactRequest.ContactRequest
contact_request = P'.Key 200 11 Prelude'.Nothing
 
response :: P'.Key P'.Maybe Protocol.Data.Control.ChannelResult Protocol.Data.ContactRequest.Response
response = P'.Key 201 11 Prelude'.Nothing
 
protoInfo :: ProtoInfo
protoInfo
 = Prelude'.read
    "ProtoInfo {protoMod = ProtoName {protobufName = FIName \".Protocol.Data.ContactRequest\", haskellPrefix = [], parentModule = [MName \"Protocol\",MName \"Data\"], baseName = MName \"ContactRequest\"}, protoFilePath = [\"Protocol\",\"Data\",\"ContactRequest.hs\"], protoSource = \"ContactRequestChannel.proto\", extensionKeys = fromList [(ProtoName {protobufName = FIName \".Protocol.Data.Control.OpenChannel\", haskellPrefix = [], parentModule = [MName \"Protocol\",MName \"Data\",MName \"Control\"], baseName = MName \"OpenChannel\"},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Protocol.Data.ContactRequest.contact_request\", haskellPrefix' = [], parentModule' = [MName \"Protocol\",MName \"Data\",MName \"ContactRequest\"], baseName' = FName \"contact_request\"}, fieldNumber = FieldId {getFieldId = 200}, wireTag = WireTag {getWireTag = 1602}, packedTag = Nothing, wireTagLength = 2, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".Protocol.Data.ContactRequest.ContactRequest\", haskellPrefix = [], parentModule = [MName \"Protocol\",MName \"Data\",MName \"ContactRequest\"], baseName = MName \"ContactRequest\"}), hsRawDefault = Nothing, hsDefault = Nothing}),(ProtoName {protobufName = FIName \".Protocol.Data.Control.ChannelResult\", haskellPrefix = [], parentModule = [MName \"Protocol\",MName \"Data\",MName \"Control\"], baseName = MName \"ChannelResult\"},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Protocol.Data.ContactRequest.response\", haskellPrefix' = [], parentModule' = [MName \"Protocol\",MName \"Data\",MName \"ContactRequest\"], baseName' = FName \"response\"}, fieldNumber = FieldId {getFieldId = 201}, wireTag = WireTag {getWireTag = 1610}, packedTag = Nothing, wireTagLength = 2, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".Protocol.Data.ContactRequest.Response\", haskellPrefix = [], parentModule = [MName \"Protocol\",MName \"Data\",MName \"ContactRequest\"], baseName = MName \"Response\"}), hsRawDefault = Nothing, hsDefault = Nothing})], messages = [DescriptorInfo {descName = ProtoName {protobufName = FIName \".Protocol.Data.ContactRequest.ContactRequest\", haskellPrefix = [], parentModule = [MName \"Protocol\",MName \"Data\",MName \"ContactRequest\"], baseName = MName \"ContactRequest\"}, descFilePath = [\"Protocol\",\"Data\",\"ContactRequest\",\"ContactRequest.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Protocol.Data.ContactRequest.ContactRequest.nickname\", haskellPrefix' = [], parentModule' = [MName \"Protocol\",MName \"Data\",MName \"ContactRequest\",MName \"ContactRequest\"], baseName' = FName \"nickname\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Protocol.Data.ContactRequest.ContactRequest.message_text\", haskellPrefix' = [], parentModule' = [MName \"Protocol\",MName \"Data\",MName \"ContactRequest\",MName \"ContactRequest\"], baseName' = FName \"message_text\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 18}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".Protocol.Data.ContactRequest.Response\", haskellPrefix = [], parentModule = [MName \"Protocol\",MName \"Data\",MName \"ContactRequest\"], baseName = MName \"Response\"}, descFilePath = [\"Protocol\",\"Data\",\"ContactRequest\",\"Response.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Protocol.Data.ContactRequest.Response.status\", haskellPrefix' = [], parentModule' = [MName \"Protocol\",MName \"Data\",MName \"ContactRequest\",MName \"Response\"], baseName' = FName \"status\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 8}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 14}, typeName = Just (ProtoName {protobufName = FIName \".Protocol.Data.ContactRequest.Response.Status\", haskellPrefix = [], parentModule = [MName \"Protocol\",MName \"Data\",MName \"ContactRequest\",MName \"Response\"], baseName = MName \"Status\"}), hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False}], enums = [EnumInfo {enumName = ProtoName {protobufName = FIName \".Protocol.Data.ContactRequest.Limits\", haskellPrefix = [], parentModule = [MName \"Protocol\",MName \"Data\",MName \"ContactRequest\"], baseName = MName \"Limits\"}, enumFilePath = [\"Protocol\",\"Data\",\"ContactRequest\",\"Limits.hs\"], enumValues = [(EnumCode {getEnumCode = 2000},\"MessageMaxCharacters\"),(EnumCode {getEnumCode = 30},\"NicknameMaxCharacters\")]},EnumInfo {enumName = ProtoName {protobufName = FIName \".Protocol.Data.ContactRequest.Response.Status\", haskellPrefix = [], parentModule = [MName \"Protocol\",MName \"Data\",MName \"ContactRequest\",MName \"Response\"], baseName = MName \"Status\"}, enumFilePath = [\"Protocol\",\"Data\",\"ContactRequest\",\"Response\",\"Status.hs\"], enumValues = [(EnumCode {getEnumCode = 0},\"Undefined\"),(EnumCode {getEnumCode = 1},\"Pending\"),(EnumCode {getEnumCode = 2},\"Accepted\"),(EnumCode {getEnumCode = 3},\"Rejected\"),(EnumCode {getEnumCode = 4},\"Error\")]}], knownKeyMap = fromList [(ProtoName {protobufName = FIName \".Protocol.Data.Control.ChannelResult\", haskellPrefix = [], parentModule = [MName \"Protocol\",MName \"Data\",MName \"Control\"], baseName = MName \"ChannelResult\"},fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Protocol.Data.ContactRequest.response\", haskellPrefix' = [], parentModule' = [MName \"Protocol\",MName \"Data\",MName \"ContactRequest\"], baseName' = FName \"response\"}, fieldNumber = FieldId {getFieldId = 201}, wireTag = WireTag {getWireTag = 1610}, packedTag = Nothing, wireTagLength = 2, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".Protocol.Data.ContactRequest.Response\", haskellPrefix = [], parentModule = [MName \"Protocol\",MName \"Data\",MName \"ContactRequest\"], baseName = MName \"Response\"}), hsRawDefault = Nothing, hsDefault = Nothing}]),(ProtoName {protobufName = FIName \".Protocol.Data.Control.OpenChannel\", haskellPrefix = [], parentModule = [MName \"Protocol\",MName \"Data\",MName \"Control\"], baseName = MName \"OpenChannel\"},fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Protocol.Data.ContactRequest.contact_request\", haskellPrefix' = [], parentModule' = [MName \"Protocol\",MName \"Data\",MName \"ContactRequest\"], baseName' = FName \"contact_request\"}, fieldNumber = FieldId {getFieldId = 200}, wireTag = WireTag {getWireTag = 1602}, packedTag = Nothing, wireTagLength = 2, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".Protocol.Data.ContactRequest.ContactRequest\", haskellPrefix = [], parentModule = [MName \"Protocol\",MName \"Data\",MName \"ContactRequest\"], baseName = MName \"ContactRequest\"}), hsRawDefault = Nothing, hsDefault = Nothing}])]}"
 
fileDescriptorProto :: FileDescriptorProto
fileDescriptorProto
 = P'.getFromBS (P'.wireGet 11)
    (P'.pack
      "\177\EOT\n\ESCContactRequestChannel.proto\DC2\FSProtocol.Data.ContactRequest\SUB\DC4ControlChannel.proto\"8\n\SOContactRequest\DC2\DLE\n\bnickname\CAN\SOH \SOH(\t\DC2\DC4\n\fmessage_text\CAN\STX \SOH(\t\"\150\SOH\n\bResponse\DC2=\n\ACKstatus\CAN\SOH \STX(\SO2-.Protocol.Data.ContactRequest.Response.Status\"K\n\ACKStatus\DC2\r\n\tUndefined\DLE\NUL\DC2\v\n\aPending\DLE\SOH\DC2\f\n\bAccepted\DLE\STX\DC2\f\n\bRejected\DLE\ETX\DC2\t\n\ENQError\DLE\EOT*>\n\ACKLimits\DC2\EM\n\DC4MessageMaxCharacters\DLE\208\SI\DC2\EM\n\NAKNicknameMaxCharacters\DLE\RS:j\n\SIcontact_request\DC2\".Protocol.Data.Control.OpenChannel\CAN\200\SOH \SOH(\v2,.Protocol.Data.ContactRequest.ContactRequest:_\n\bresponse\DC2$.Protocol.Data.Control.ChannelResult\CAN\201\SOH \SOH(\v2&.Protocol.Data.ContactRequest.Response")